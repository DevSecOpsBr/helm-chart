context: "ellesmera.local"     # defaults to "default" if not provided

metadata:
  org: "ellesmera.io"
  maintainer: "devops team (devops@ellesmera.io)"
  description: "Desired State File."

# paths to the certificate for connecting to the cluster
# You can skip this if you use Helmsman on a machine with kubectl already connected to your k8s cluster.
# you have to use exact key names here : 'caCrt' for certificate and 'caKey' for the key and caClient for the client certificate
# certificates:
  #caClient: "gs://mybucket/client.crt" # GCS bucket path
  #caCrt: "s3://mybucket/ca.crt" # S3 bucket path
  #caKey: "../ca.key" # valid local file relative path

settings:
  kubeContext: "" # will try connect to this context first, if it does not exist, it will be created using the details below
  storageBackend: "secret"
  slackWebhook:  "https://hooks.slack.com/services/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"
  #reverseDelete: false # reverse the priorities on delete
  globalHooks:
    successCondition: "Complete"
    deleteOnSuccess: true
  globalMaxHistory: 500

# define your environments and their k8s namespaces
namespaces:
  cert-manager:
    protected: false
    annotations:
      iam.amazonaws.com/permitted: ".*"
  chaos:
    protected: false
    annotations:
      iam.amazonaws.com/permitted: ".*"
  ingress:
    protected: false
    annotations:
      iam.amazonaws.com/permitted: ".*"
  linkerd:
    protected: false
    annotations:
      linkerd.io/inject: disabled
    labels:
      linkerd.io/is-control-plane: "true"
      config.linkerd.io/admission-webhooks: disabled
  miscellaneous:
    protected: false
    annotations:
      iam.amazonaws.com/permitted: ".*"
  monitoring:
    protected: false
    annotations:
      iam.amazonaws.com/permitted: ".*"
  observability:
    protected: false
    annotations:
      iam.amazonaws.com/permitted: ".*"
  security:
    protected: false
    annotations:
      iam.amazonaws.com/permitted: ".*"
  velero:
    protected: false
    annotations:
      iam.amazonaws.com/permitted: ".*"

helmRepos:
  stable: https://charts.helm.sh/stable
  # argocd - continous deployment
  argo: "https://argoproj.github.io/argo-helm"
  # jfrog tools
  jfrog: "https://charts.jfrog.io"
  # kong api-gateway
  kong: https://charts.konghq.com
  # kong - kuma mesh
  kong-mesh: https://kong.github.io/kong-mesh-charts
  # grafana tools e.g: loki and etc...
  grafana: https://grafana.github.io/helm-charts
  # nginx ingress controller
  ingress-nginx: https://kubernetes.github.io/ingress-nginx
  # kube-prometheus-stack
  prometheus-community: https://prometheus-community.github.io/helm-charts
  # helm automation delivery
  keel: https://charts.keel.sh
  # cert-manager
  jetstack: https://charts.jetstack.io
  # bunch of charts
  bitnami: https://charts.bitnami.com/bitnami
  # ambassador ingress & api-gateway
  datawire: https://www.getambassador.io
  # kubernetes event driven application
  kedacore: https://kedacore.github.io/charts
  # develop, deploy and manage cloud-native applications without requiring any Kubernetes expertise
  shipa-charts: https://shipa-charts.storage.googleapis.com
  # Concourse is an open-source continuous thing-doer.
  concourse: https://concourse-charts.storage.googleapis.com/
  # Datadog logging, monitoring and apm system
  datadog: https://helm.datadoghq.com
  # BotKube is a messaging bot for monitoring and debugging Kubernetes clusters
  infracloudio: https://infracloudio.github.io/charts
  # A progressive delivery tool that automates the release process for applications running on Kubernetes.
  flagger: https://flagger.app
  # High Performance, Kubernetes Native Object Storage
  minio: https://helm.min.io/
  # Edge Router that makes publishing your services a fun and easy experience
  traefik: https://helm.traefik.io/traefik
  # Continuously backup Kubernetes objets as YAML files in git
  katafygio: https://bpineau.github.io/katafygio

apps:

  # Monitoring Block (priority: -140)
    metrics-server:
      description: "Manager SSL certficates creation, renew and update."
      group: "monitoring"
      namespace: "monitoring"
      enabled: true
      protected: false
      chart: "metrics-server"
      version: "2.9.0"
      valuesFiles: 
        - "metrics-server/values.yaml"
      wait: true
      timeout: 300
      maxHistory: 100
      test: false
      priority: -140
      helmFlags:
        - "--atomic"
        - "--debug"
        
    prometheus:
      description: "Prometheus clusters atop Kubernetes"
      group: "monitoring"
      namespace: "monitoring"
      enabled: true
      protected: false
      chart: "kube-prometheus-stack"
      version: "14.0.1"
      valuesFiles: 
        - "kube-prometheus-stack/values.yaml"
      wait: true
      timeout: 300
      maxHistory: 100
      test: true
      priority: -139
      helmFlags:
        - "--atomic"
        - "--debug"
      set:
        grafana.enabled: false

  # Logging Block (priority: -130)
    datadog:
      description: "Datadog: like Prometheus, but for logs."
      group: "logging"
      namespace: "monitoring"
      enabled: false
      protected: false
      chart: "datadog"
      version: "2.10.1"
      valuesFiles: 
        - "datadog/values.yaml"
      wait: true
      timeout: 300
      maxHistory: 100
      test: true
      priority: -130
      helmFlags:
        - "--atomic"
        - "--debug"

    loki:
      description: "Loki: like Prometheus, but for logs."
      group: "logging"
      namespace: "monitoring"
      enabled: false
      protected: false
      chart: "grafana/loki-stack"
      version: "2.3.0"
      valuesFiles: 
        - "loki-stack/values.yaml"
      wait: true
      timeout: 300
      maxHistory: 100
      test: true
      priority: -129
      helmFlags:
        - "--atomic"
        - "--debug"
      set:
        ingress.annotations.kubernetes\.io/ingress\.class: "contour"
        ingress.hosts\.host[0]: "loki.$CLUSTER"

  # Security block (priority: -120)
    kyverno:
      description: "Kubernetes Native Policy Management"
      group: "security"
      namespace: "security" 
      enabled: true
      protected: true
      chart: "kyverno" 
      version: "1.2.1" 
      valuesFiles: 
        - "kyverno/values.yaml" 
      test: true
      priority: -120
      wait: true
      hooks:
        successCondition: "Complete"
        successTimeout: "90s"
        deleteOnSuccess: true
      helmFlags: 
        - "--debug"
        - "--atomic"

    cert-manager:
      description: "Manager SSL certficates creation, renew and update."
      group: "security"
      namespace: "cert-manager"
      enabled: true
      protected: false
      chart: "cert-manager"
      version: "v1.4.2"
      valuesFiles: 
        - "cert-manager/values.yaml"
      wait: true
      timeout: 300
      maxHistory: 100
      test: true
      priority: -119
      helmFlags:
        - "--atomic"
        - "--debug"

  # Ingress Block (priority: -110)
    contour:
      description: "High performance ingress controller for Kubernetes"
      group: "ingress"
      namespace: "ingress"
      enabled: true
      chart: "bitnami/contour"
      version: "5.0.1"
      wait: true
      timeout: 300
      maxHistory: 100
      test: true
      priority: -110
      helmFlags:
        - "--atomic"
        - "--debug"
      set:
        replicaCount: 2
        configInline.incluster: true
        envoy.service.externalIPs: "{${CLUSTER_IP}}"
        envoy.nodeSelector.node-role\.kubernetes\.io/master: ""
        default.backend.enabled: true

    nginx:
      description: "Nginx-Ingress Controller for K8S"
      group: "ingress"
      namespace: "ingress"
      enabled: false
      protected: true
      chart: "ingress-nginx"
      version: "3.12.0"
      valuesFiles: 
        - "ingress-nginx/values.yaml"
      wait: true
      timeout: 300
      maxHistory: 100
      test: true
      priority: -109
      helmFlags:
        - "--atomic"
        - "--debug"
      set:
        controller.service.externalIPs: "{${CLUSTER_IP}}"
        controller.metrics.enabled: true
        controller.metrics.serviceMonitor.enabled: true

    traefik:
      description: "Edge Router that makes publishing your services a fun and easy experience"
      group: "ingress"
      namespace: "ingress"
      enabled: false
      protected: true
      chart: "traefik"
      version: "9.18.2"
      hooks:
        successCondition: "Complete"
        deleteOnSuccess: true
      valuesFiles: 
        - "traefik/values.yaml"
      wait: true
      timeout: 300
      maxHistory: 100
      test: true
      priority: -108
      helmFlags:
        - "--atomic"
        - "--debug"
      set:
        service.externalIPs: "{${CLUSTER_IP}}"

  # CI/CD Block (priority: -100)
    argocd:
      description: "ArgoCD - Declarative GitOps CD for Kubernetes"
      group: "cicd"
      namespace: "miscellaneous" 
      enabled: true 
      chart: "argo/argo-cd" 
      version: "3.10.0" 
      valuesFiles: 
        - "argo-cd/values.yaml" 
      test: true
      protected: false
      priority: -100
      wait: true
      set:
        dex.enabled: false
        server.extraArgs: "{--insecure}"
        controller.metrics.enabled: true
        server.ingress.enabled: true
        server.metrics.enabled: true
        repoServer.metrics.enabled: true
        server.ingress.hosts: "{argocd.$CLUSTER}"
        server.ingress.annotations.kubernetes\.io/ingress\.class: "contour"
        server.config.url: "http://argocd.$CLUSTER"
      helmFlags: 
        - "--debug"
        - "--atomic"

    argo-notifications:
      description: "ArgoCD - Notifications for Kubernetes"
      group: "cicd"
      namespace: "miscellaneous" 
      enabled: true 
      protected: false
      chart: "argo/argocd-notifications" 
      version: "1.0.14" 
      valuesFiles: 
        - "argocd-notifications/values.yaml" 
      test: true
      priority: -99
      wait: true
      helmFlags: 
        - "--debug"
        - "--atomic"
      set:
        metrics.enabled: true

  # Observability & Tracing Block (priority: -90)
    botkube:
      description: "Botkube is a messaging bot for monitoring and debugging Kubernetes clusters"
      group: "miscellaneous"
      namespace: "observability"
      enabled: true
      protected: false
      chart: "botkube"
      version: "v0.12.0"
      valuesFiles: 
        - "botkube/values.yaml"
      wait: true
      timeout: 300
      maxHistory: 100
      test: true
      priority: -90
      helmFlags:
        - "--atomic"
        - "--debug"
      set:
        config.settings.clustername: $CLUSTER
        serviceMonitor.enabled: true

    grafana-operator:
      description: "Kubernetes Operator based on the Operator SDK for creating and managing Grafana instances and dashboards."
      group: "monitoring"
      namespace: "monitoring"
      enabled: true
      protected: false
      chart: "grafana-operator"
      version: "1.0.1"
      valuesFiles: 
        - "grafana-operator/values.yaml"
      wait: true
      timeout: 300
      maxHistory: 100
      test: true
      priority: -89
      helmFlags:
        - "--atomic"
        - "--debug"
      set:
        grafana.ingress.hostname: grafana.$CLUSTER
        grafana.ingress.annotations.kubernetes\.io/ingress\.class: "contour"

  # Observability & Tracing Block (priority: -80)
    jaeger:
      description: "Manager SSL certficates creation, renew and update."
      group: "miscellaneous"
      namespace: "observability"
      enabled: false
      protected: false
      chart: "jaeger-operator"
      version: "2.14.0"
      valuesFiles: 
        - "jaeger-operator/values.yaml"
      wait: true
      timeout: 300
      maxHistory: 100
      test: true
      priority: -79
      helmFlags:
        - "--atomic"
        - "--debug"

  # API Gateway Block (priority: -70)
    ambassador:
      description: "Kubernetes Ingress Controller and API Gateway."
      group: "api-gateways"
      namespace: "ingress"
      enabled: false
      protected: false
      chart: "ambassador"
      version: "6.5.18"
      valuesFiles: 
        - "ambassador/values.yaml"
      wait: true
      timeout: 300
      maxHistory: 100
      test: true
      priority: -70
      helmFlags:
        - "--atomic"
        - "--debug"
      set:
        envoy.service.externalIPs: "{${CLUSTER_IP}}"

  # Service Mesh Block (priority: -60)
    linkerd2:
      description: "Linkerd service mesh for K8S"
      group: "mesh"
      namespace: "linkerd"
      enabled: true
      protected: false
      chart: "linkerd2"
      version: "2.10.2"
      hooks:
        successCondition: "Complete"
        preInstall: "bash -x linkerd_certificates_step.sh main"
        postInstall: "bash -x linkerd_certificates_step.sh cleanUp"
        deleteOnSuccess: true
      wait: false
      timeout: 300
      maxHistory: 100
      test: true
      priority: -60
      valuesFiles:
        - "linkerd2/values.yaml"
      setFile:
        identityTrustAnchorsPEM: linkerd2/certs/plane/ca.crt
        identity.issuer.tls.keyPEM: linkerd2/certs/issuer/issuer.key
        identity.issuer.tls.crtPEM: linkerd2/certs/issuer/issuer.crt
      set:
        identity.issuer.crtExpiry: $EXP
        installNamespace: "false"

  # Deployments & Automated Releases (priority: -50)
    flagger:
      description: "A progressive delivery tool that automates the release process for applications running on Kubernetes."
      group: "releases"
      namespace: "miscellaneous" 
      enabled: true
      protected: false
      chart: "flagger" 
      version: "1.12.1"
      valuesFiles: 
        - "flagger/values.yaml" 
      test: true
      priority: -50
      wait: true
      hooks:
        successCondition: "Complete"
        successTimeout: "90s"
        deleteOnSuccess: true
      helmFlags: 
        - "--debug"
        - "--atomic"
      set:
        logLevel: "debug"
        meshProvider: "linkerd"
        ingressClass: "contour"
        slack.channel: "deploys"
        slack.url: "https://hooks.slack.com/services/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"
        podMonitor.enabled: true
        prometheus.install: false
        crd.create: false

    flagger-loadtester:
      description: "Load testing services generates traffic during canary analysis when configured as a webhook."
      group: "releases"
      namespace: "miscellaneous" 
      enabled: true
      protected: false
      chart: "flagger-loadtester" 
      version: "0.18.0"
      valuesFiles: 
        - "flagger-loadtester/values.yaml" 
      test: true
      priority: -49
      wait: true
      helmFlags: 
        - "--debug"
        - "--atomic"
      set:
        logLevel: "debug"

    keel:
      description: "Kubernetes Operator to automate Helm, DaemonSet, StatefulSet & Deployment updates"
      group: "releases"
      namespace: "miscellaneous" 
      enabled: true
      protected: false
      chart: "keel/keel" 
      version: "0.9.8" 
      valuesFiles: 
        - "keel_0.9.8/values.yaml" 
      test: true
      priority: -48
      wait: true
      helmFlags: 
        - "--debug"
        - "--atomic"
