metadata:
  org: "DevOps"
  maintainer: "devops team (devops@ellesmera.io)"
  description: "Kubernetes clusters"

settings:
  kubeContext: $K8SCLUSTER
  storageBackend: "secret"
  slackWebhook: $SLACK_HOOK

# define your helm repositories
helmRepos:
  # Kubecost helps you monitor and manage cost and capacity in Kubernetes environments.
  kubecost: https://kubecost.github.io/cost-analyzer/
  # extended component suite for Kubernetes, which mainly focuses on 
  # application automations, such as deployment, upgrade, ops and availability protection.
  openkruise: https://openkruise.github.io/charts/
  # Linkerd service mesh
  linkerd: https://helm.linkerd.io/stable

# define your environments and their k8s namespaces
namespaces:
  linkerd:
    protected: false
    annotations:
      linkerd.io/inject: disabled
    labels:
      linkerd.io/is-control-plane: "true"
      config.linkerd.io/admission-webhooks: disabled
      linkerd.io/control-plane-ns: "linkerd"
  linkerd-viz:
    protected: false
    labels:
      linkerd.io/extension: viz
    annotations:
      linkerd.io/inject: enabled
      viz.linkerd.io/external-prometheus: $K8S_PROMETHEUS
  kubecost:
    protected: false
  velero:
    protected: false
    annotations:
      linkerd.io/inject: disabled

appsTemplates:

  enabled: &enabled
    enabled: true
    test: true
    wait: true
    protected: false
    timeout: 300
    helmFlags:
      - "--atomic"

  disabled: &disabled
    enabled: false

  linkerd: &mesh1
    enabled: true
    test: false
    wait: true
    timeout: 600
    hooks:
      preInstall: "bash -x scripts/linkerd_step.sh main"
      preUpgrade: "bash -x scripts/linkerd_step.sh main"
    setFile:
      identityTrustAnchorsPEM: scripts/linkerd/certs/plane/ca.crt
      proxyInjector.caBundle: scripts/linkerd/certs/plane/ca.crt
      profileValidator.caBundle: scripts/linkerd/certs/plane/ca.crt
    set:
      identity.issuer.scheme: "kubernetes.io/tls"
      identity.externalIssuer: true
      proxyInjector.externalSecret: true
      profileValidator.externalSecret: true
      identity.issuer.crtExpiry: $EXP
      installNamespace: "false"
      spec.template.spec.nodeSelector: "kubernetes.io/os"
    helmFlags:
      - "--atomic"

  linkerd_viz: &mesh2
    enabled: true
    test: false
    wait: false
    timeout: 600
    hooks:
      deleteOnSuccess: true
      preInstall: "bash -x scripts/linkerd_step.sh secrets_linkerd_viz"
      preUpgrade: "bash -x scripts/linkerd_step.sh secrets_linkerd_viz"
      postInstall: "bash -x scripts/linkerd_step.sh cleanUp"
    setFile:
      tap.caBundle: scripts/linkerd/certs/plane/ca.crt
      tapInjector.caBundle: scripts/linkerd/certs/plane/ca.crt
    set:
      installNamespace: false
      tap.externalSecret: true
      tapInjector.externalSecret: true
      tap.replicas: 3
      grafana.enabled: true
      # grafanaUrl: $K8S_GRAFANA
      prometheus.enabled: true
      # prometheusUrl: $K8S_PROMETHEUS
      dashboard.enforcedHostRegexp: ".*"
    valuesFiles:
      - "charts/linkerd-viz-certificates/templates/webhook-certificate.yaml"
      - "charts/linkerd-viz-certificates/templates/tap-injector-certificate.yaml"
    helmFlags:
      - "--atomic"

apps:

  # Cost management (priority: -160)

    kubecost:
      # Enable if running via lima and/or minikube
      <<: *disabled
      description: "A comprehensive cost monitoring & optimization solution for teams running Kubernetes."
      group: "cost"
      namespace: "kubecost"
      chart: "kubecost/cost-analyzer"
      version: " 1.94.3"
      priority: -159
      set:
        global.prometheus.enabled: false
        global.prometheus.fqdn: http://prometheus.$K8SCLUSTER.$$K8S_DOMAIN.monitoring.svc
        global.prometheus.insecureSkipVerify: true 
        global.grafana.enabled: false
        global.grafana.domainName: grafana.$K8SCLUSTER.$K8S_DOMAIN.monitoring.svc
        ingress.enabled: true
        ingress.className: $INGRESS_CLASS
        ingress.hosts[0]: kubecost.$K8SCLUSTER.$K8S_DOMAIN
        kubecostToken: $KUBECOST

  # Service Mesh Block (priority: -50)

    linkerd-certificates:
      <<: *disabled
      description: "Webhook certificates managed by cert-manager"
      group: "mesh"
      namespace: "linkerd"
      chart: "charts/linkerd-certificates"
      version: "1.0.1"
      priority: -50

    linkerd:
      <<: *disabled
      description: "Linkerd service mesh for K8S"
      group: "mesh"
      namespace: "linkerd"
      chart: "linkerd/linkerd2"
      version: "2.10.2"
      priority: -49

    linkerd-viz-certificates:
      <<: *disabled
      description: "Webhook certificates managed by cert-manager"
      group: "mesh"
      namespace: "linkerd-viz"
      chart: "charts/linkerd-viz-certificates"
      version: "1.0.1"
      priority: -48

    linkerd-viz:
      <<: *disabled
      description: "Linkerd Viz"
      group: "mesh"
      namespace: "linkerd-viz"
      chart: "linkerd/linkerd-viz"
      version: "2.10.2"
      priority: -47

  # Virtual clusters (priority: -80)

    loft-configs:
      <<: *disabled
      description: "Create, manage Loft Spaces/vCluster/Isolations and so on."
      group: "clustering"
      namespace: "loft"
      chart: "charts/loft-config"
      version: "1.0.0"
      priority: -79
      set:
        spaces.enabled: true
        spaces.names[0]: "glaedr"
        spaces.sleepmode.enabled: true
        spaces.annotations.sleepmode\.loft\.sh/sleep-schedule: "0 19 * * *"
        spaces.annotations.sleepmode\.loft\.sh/timezone: "Europe/Berlin"
        spaces.annotations.sleepmode\.loft\.sh/wakeup-schedule: "0 10 * * 1-5"
        vclusters.enabled: true
        serviceMonitor.enabled: true
        serviceMonitor.namespace: loft

    saphira-vcluster:
      <<: *disabled
      description: "Namespace & Virtual Cluster Manager for Kubernetes"
      group: "clustering"
      namespace: "loft"
      chart: "loft/vcluster"
      version: "0.8.1"
      priority: -78

  # Third-party tools (priority: -40)

    helm-exporter:
      <<: *disabled
      description: "Exports helm release, chart, and version statistics in the prometheus format."
      group: "miscellaneous"
      namespace: "miscellaneous"
      chart: "sstarcher/helm-exporter"
      version: "1.2.2+6766a95"
      priority: -39
      set:
        ingress.enabled: false
        ingress.annotations.kubernetes\.io/ingress\.class: "$INGRESS_CLASS"
        ingress.hosts[0].host: "helm-exporter.$K8SCLUSTER.$K8S_DOMAIN"
        ingress.hosts[0].paths[0]: "/"
        serviceMonitor.create: true
        serviceMonitor.additionalLabels.release: "prometheus"
