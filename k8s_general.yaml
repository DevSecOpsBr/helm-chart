metadata:
  scope: "kubernetes"

settings:
  kubeContext: $K8SCLUSTER
  storageBackend: "secret"
  slackWebhook: $SLACK_HOOK
  reverseDelete: true

helmRepos:
  # argocd - continous deployment
  argo: "https://argoproj.github.io/argo-helm"
  # jfrog tools
  jfrog: "https://charts.jfrog.io"
  # kong api-gateway
  kong: https://charts.konghq.com
  # kong - kuma mesh
  kong-mesh: https://kong.github.io/kong-mesh-charts
  # grafana tools e.g: loki and etc...
  grafana: https://grafana.github.io/helm-charts
  # nginx ingress controller
  ingress-nginx: https://kubernetes.github.io/ingress-nginx
  # kube-prometheus-stack
  prometheus-community: https://prometheus-community.github.io/helm-charts
  # helm automation delivery
  keel: https://charts.keel.sh
  # cert-manager
  jetstack: https://charts.jetstack.io
  # bunch of charts
  bitnami: https://charts.bitnami.com/bitnami
  # ambassador ingress & api-gateway
  datawire: https://www.getambassador.io
  # kubernetes event driven application
  kedacore: https://kedacore.github.io/charts
  # develop, deploy and manage cloud-native applications without requiring any Kubernetes expertise
  shipa-charts: https://shipa-charts.storage.googleapis.com
  # Concourse is an open-source continuous thing-doer.
  concourse: https://concourse-charts.storage.googleapis.com/
  # Datadog logging, monitoring and apm system
  datadog: https://helm.datadoghq.com
  # BotKube is a messaging bot for monitoring and debugging Kubernetes clusters
  infracloudio: https://infracloudio.github.io/charts
  # A progressive delivery tool that automates the release process for applications running on Kubernetes.
  flagger: https://flagger.app
  # High Performance, Kubernetes Native Object Storage
  minio: https://helm.min.io/
  # Edge Router that makes publishing your services a fun and easy experience
  traefik: https://helm.traefik.io/traefik
  # Continuously backup Kubernetes objets as YAML files in git
  katafygio: https://bpineau.github.io/katafygio
  # A delivery workflow for kubernetes
  devtron: https://helm.devtron.ai
  # A scalable, efficient source of container resource metrics for Kubernetes built-in autoscaling pipelines.
  metrics-server: https://kubernetes-sigs.github.io/metrics-server
  # A network load-balancer implementation for Kubernetes using standard routing protocols
  metallb: https://metallb.github.io/metallb
  # Linkerd service mesh
  linkerd: https://helm.linkerd.io/stable
  # Helm-exporter
  sstarcher: https://shanestarcher.com/helm-charts/
  # Netdata monitoring cloud
  netdata: https://netdata.github.io/helmchart/
  #  Keyverno policy engine designed for Kubernetes
  kyverno: https://kyverno.github.io/kyverno/
  # Loft - Secure Cluster Sharing, Self-Service Namespace Provisioning and Virtual Clusters
  loft: https://charts.loft.sh
  # High-quality, ubiquitous, and portable telemetry to enable effective observability 
  open-telemetry: https://open-telemetry.github.io/opentelemetry-helm-charts
  # The easiest, most secure way to access infrastructure.
  teleport: https://charts.releases.teleport.dev
  # Publishing and securing your containers has never been easier.
  traefik-hub: https://helm.traefik.io/hub

namespaces:
  clustering:
    protected: false
  linkerd:
    protected: false
    annotations:
      linkerd.io/inject: disabled
    labels:
      linkerd.io/is-control-plane: "true"
      config.linkerd.io/admission-webhooks: disabled
      linkerd.io/control-plane-ns: "linkerd"
  linkerd-viz:
    protected: false
    labels:
      linkerd.io/extension: viz
    annotations:
      linkerd.io/inject: enabled
      viz.linkerd.io/external-prometheus: $K8S_PROMETHEUS

appsTemplates:

  in_use: &enabled
    enabled: true
    test: false
    wait: true
    timeout: 600
    helmFlags:
      - "--atomic"

  no_use: &disabled
    enabled: false

  linkerd: &mesh1
    enabled: true
    test: false
    wait: true
    timeout: 600
    hooks:
      preInstall: "bash -x scripts/linkerd_step.sh main"
      preUpgrade: "bash -x scripts/linkerd_step.sh main"
    setFile:
      identityTrustAnchorsPEM: scripts/linkerd/certs/plane/ca.crt
      proxyInjector.caBundle: scripts/linkerd/certs/plane/ca.crt
      profileValidator.caBundle: scripts/linkerd/certs/plane/ca.crt
    set:
      identity.issuer.scheme: "kubernetes.io/tls"
      identity.externalIssuer: true
      proxyInjector.externalSecret: true
      profileValidator.externalSecret: true
      identity.issuer.crtExpiry: $EXP
      installNamespace: "false"
      spec.template.spec.nodeSelector: "kubernetes.io/os"
    helmFlags:
      - "--atomic"

  linkerd_viz: &mesh2
    enabled: true
    test: false
    wait: false
    timeout: 600
    hooks:
      deleteOnSuccess: true
      preInstall: "bash -x scripts/linkerd_step.sh secrets_linkerd_viz"
      preUpgrade: "bash -x scripts/linkerd_step.sh secrets_linkerd_viz"
      postInstall: "bash -x scripts/linkerd_step.sh cleanUp"
    setFile:
      tap.caBundle: scripts/linkerd/certs/plane/ca.crt
      tapInjector.caBundle: scripts/linkerd/certs/plane/ca.crt
    set:
      installNamespace: false
      tap.externalSecret: true
      tapInjector.externalSecret: true
      tap.replicas: 3
      grafana.enabled: true
      # grafanaUrl: $K8S_GRAFANA
      prometheus.enabled: true
      # prometheusUrl: $K8S_PROMETHEUS
      dashboard.enforcedHostRegexp: ".*"
    valuesFiles:
      - "charts/linkerd-viz-certificates/templates/webhook-certificate.yaml"
      - "charts/linkerd-viz-certificates/templates/tap-injector-certificate.yaml"
    helmFlags:
      - "--atomic"

apps:

  # Monitoring & SRE Block (priority: -140)

    prometheus:
      <<: *enabled
      description: "Prometheus clusters atop Kubernetes"
      group: "commons"
      namespace: "monitoring"
      chart: "prometheus-community/kube-prometheus-stack"
      version: "34.10.0"
      priority: -139
      set:
        alertmanager.ingress.enabled: true
        alertmanager.ingress.ingressClassName: $INGRESS_CLASS
        alertmanager.ingress.hosts: "{alertmanager.$K8SCLUSTER.$K8S_DOMAIN}"
        grafana.enabled: false
        grafana.ingress.enabled: true
        grafana.ingress.hosts: "{grafana.$K8SCLUSTER.$K8S_DOMAIN}"
        prometheus.ingress.enabled: true
        prometheus.ingress.ingressClassName: $INGRESS_CLASS
        prometheus.ingress.hosts: "{prometheus.$K8SCLUSTER.$K8S_DOMAIN}"
        kubeControllerManager.enabled: false
        kubeScheduler.enabled: false
        kubeEtcd.enabled: true
        kubeDns.enabled: false
      valuesFiles:
       - charts/kube-prometheus-stack/values-custom.yaml

    botkube:
      <<: *enabled
      description: "Botkube is a messaging bot for monitoring and debugging Kubernetes clusters"
      group: "commons"
      namespace: "observability"
      chart: "infracloudio/botkube"
      version: "v0.12.4"
      priority: -138
      set:
        config.settings.clustername: "$K8SCLUSTER"
        config.settings.kubectl.restrictAccess: true
        serviceMonitor.enabled: true
        communications.slack.enabled: true
        communications.slack.channel: "kubernetes-reports"
        communications.slack.token: "$BOTKUBE"
      valuesFiles:

    grafana:
      <<: *enabled
      description: "Kubernetes Operator based on the Operator SDK for creating and managing Grafana instances and dashboards."
      group: "monitoring"
      namespace: "monitoring"
      chart: "grafana/grafana"
      version: "6.26.5"
      priority: -137
      set:
        ingress.enabled: true
        ingress.annotations.kubernetes\.io/ingress\.class: $INGRESS_CLASS
        ingress.hosts[0]: grafana.$K8SCLUSTER.$K8S_DOMAIN
      valuesFiles:

    grafana-operator:
      <<: *enabled
      description: "Kubernetes Operator based on the Operator SDK for creating and managing Grafana instances and dashboards."
      group: "monitoring"
      namespace: "monitoring"
      chart: "charts/grafana-operator"
      version: "v5.0.0-rc0"
      priority: -136
      set:
      valuesFiles:
        - "charts/grafana-operator/values.yaml"

    grafana-operator-configs:
      <<: *enabled
      description: "Kubernetes Operator based on the Operator SDK for creating and managing Grafana instances and dashboards."
      group: "monitoring"
      namespace: "monitoring"
      chart: "charts/grafana-operator-configs"
      version: "1.0.0"
      priority: -135
      set:
      valuesFiles:
        - "charts/grafana-operator-configs/values.yaml"

    netdata:
      <<: *enabled
      description: "Netdata is a monitoring, visualization, and troubleshooting solution for systems, containers, services, and applications."
      group: "monitoring"
      namespace: "monitoring"
      chart: "netdata/netdata"
      version: "3.7.51"
      priority: -134
      set:
        image.tag: stable
        ingress.enabled: true
        # ingress.spec.ingressClassName: $INGRESS_CLASS
        ingress.hosts[0]: netdata.$K8SCLUSTER.$K8S_DOMAIN
        notifications.slackurl: SLACK_WEBHOOK_URL=$SLACK_HOOK
        notifications.slackrecipiet: "monitoring"
        parent.claiming.enabled: true
        parent.claiming.token: $NETDATA_TOKEN
        parent.claiming.rooms: $NETDATA_ROOMS
        parent.claiming.url: https://app.netdata.cloud
        child.claiming.enabled: true
        child.claiming.rooms: $NETDATA_ROOMS
      valuesFiles:

  # # Logging Block (priority: -130)

    loki:
      <<: *enabled
      description: "Loki: like Prometheus, but for logs."
      group: "logging"
      namespace: "monitoring"
      chart: "grafana/loki-stack"
      version: "2.8.2"
      priority: -129
      set:
        ingress.annotations.kubernetes\.io/ingress\.class: $INGRESS_CLASS
        ingress.hosts\.host[0]: "loki.$K8SCLUSTER.$K8S_DOMAIN"
      valuesFiles:

  # Security block (priority: -120)

  # Ingress Block (priority: -110)

    metallb:
      <<: *enabled
      description: "Load Balancer management for minikube"
      group: "ingress"
      namespace: "ingress"
      chart: "metallb/metallb"
      version: "0.12.1"
      priority: -110  # Increased due to minikube ip conflicts
      set:
        prometheusRule.enabled: true
        prometheusRUles.additionalLabels.release: "prometheus"
        ### Uncomment the line below for mesh support ###
        envoy.podAnnotations.linkerd\.io/inject: "ingress"
        ### Uncomment if runing on multi-cluster ###
        controller.nodeSelector.kubernetes\.io/hostname: lima\-$K8SCLUSTER\-manager\-1
        controller.nodeSelector.ingress: "controller"
        # speaker.nodeSelector.node-role\.kubernetes\.io\/control\-plane: "true"
        # Need to be proper address (is not working yet)
        configInline.address-pools[0].name: default
        configInline.address-pools[0].protocol: layer2
        configInline.address-pools[0].addresses: "{192.168.105.10-192.168.105.20}"
      valuesFiles:

    nginx:
      <<: *enabled
      description: "Nginx-Ingress Controller for K8S"
      group: "ingress"
      namespace: "ingress"
      chart: "ingress-nginx/ingress-nginx"
      version: "4.1.4"
      priority: -109
      set:
        controller.metrics.enabled: true
        controller.metrics.serviceMonitor.enabled: true
        controller.metrics.serviceMonitor.additionalLabels.release: "prometheus" 
        defaultBackend.enabled: false
        ### Uncomment the line below for mesh support ###
        controller.podAnnotations.linkerd\.io/inject: "ingress"
        ### Uncomment if runing on multi-node cluster ###
        controller.service.nodeSelector.kubernetes\.io/hostname: lima\-$K8SCLUSTER\-manager\-1
        controller.nodeSelector.ingress: "controller"
        controller.watchIngressWithoutClass: true
        controller.tolerations[0].key: "ingress"
        controller.tolerations[0].effect: "NoSchedule"
        controller.tolerations[0].operator: "Exists"
      valuesFiles:

    traefik:
      <<: *enabled
      description: "Edge Router that makes publishing your services a fun and easy experience"
      group: "ingress"
      namespace: "ingress"
      chart: "traefik/traefik"
      version: "10.19.4"
      priority: -108
      set:
        ports.traefik.expose: true
        additionalArguments[0]: "--metrics.prometheus=true"
        additionalArguments[1]: "--ping"
        additionalArguments[2]: "--log.format=json"
        additionalArguments[3]: "--accesslog=true"
        additionalArguments[4]: "--api.dashboard=true"
        deployment.podLabels.release: "prometheus"
        ingressClass.enabled: true
        ### Uncomment the line below for mesh support ###
        controller.podAnnotations.linkerd\.io/inject: "ingress"
        ### Uncomment if runing on multi-node cluster ###
        nodeSelector.kubernetes\.io/hostname: lima\-$K8SCLUSTER\-manager\-2
        nodeSelector.ingress: "controller"
        tolerations[0].key: "ingress"
        tolerations[0].effect: "NoSchedule"
        tolerations[0].operator: "Exists"
      valuesFiles:

    traefik-hub:
      <<: *disabled
      description: "Publishing and securing your containers has never been easier."
      group: "ingress"
      namespace: "ingress"
      chart: "traefik-hub/hub-agent"
      version: "0.23.0"
      priority: -107
      set:
        image.tag: experimental
        token: $TRAEFIK_HUB_TOKEN
      valuesFiles:

    contour:
      <<: *enabled
      description: "High performance ingress controller for Kubernetes"
      group: "ingress"
      namespace: "ingress"
      chart: "bitnami/contour"
      version: "11.3.0"
      priority: -106
      set:
        replicaCount: 1
        configInline.incluster: true
        default.backend.enabled: true
        envoy.serviceAccount.aumountServiceAccountToken: true
        prometheus.serviceMonitor.enabled: true
        ### Uncomment the line below for mesh support ###
        envoy.podAnnotations.linkerd\.io/inject: "ingress"
        ### Uncomment if runing on multi-cluster ###
        envoy.nodeSelector.kubernetes\.io\/hostname: lima\-$K8SCLUSTER\-manager\-3
        envoy.nodeSelector.ingress: "controller"
        envoy.tolerations[0].key: "ingress"
        envoy.tolerations[0].effect: "NoSchedule"
        envoy.tolerations[0].operator: "Exists"
      valuesFiles:

  # # Observability & Tracing Block (priority: -90)

    opentelemetry:
      <<: *enabled
      description: "Use it to instrument, generate, collect, and export telemetry data (metrics, logs, and traces)"
      group: "observability"
      namespace: "observability"
      chart: "open-telemetry/opentelemetry-operator"
      version: "0.8.2"
      priority: -90
      set:
        replicaCount: 1
      valuesFiles:

  # # Loft (priority: -80)

    loft:
      <<: *enabled
      description: "Namespace & Virtual Cluster Manager for Kubernetes"
      group: "clustering"
      namespace: "loft"
      chart: "loft/loft"
      version: "2.3.1"
      priority: -80
      set:
        ingress.enabled: true
        ingress.host: loft.$K8SCLUSTER.$K8S_DOMAIN
        ingress.ingressClass: $INGRESS_CLASS
        ingress.tls.enabled: false
        apiService.enabled: true
        labels.release: "prometheus"
        serviceMonitor.enabled: true
        serviceMonitor.labels.release: "prometheus"
      valuesFiles:

    saphira-vcluster:
      <<: *disabled
      description: "Namespace & Virtual Cluster Manager for Kubernetes"
      group: "clustering"
      namespace: "loft"
      chart: "loft/vcluster"
      version: "0.8.1"
      priority: -78

  # # Deployments & Automated Releases (priority: -60)

    flagger:
      <<: *enabled
      description: "A progressive delivery tool that automates the release process for applications running on Kubernetes."
      group: "releases"
      namespace: "miscellaneous" 
      chart: "flagger/flagger" 
      version: "1.20.0"
      priority: -60
      set:
        logLevel: "debug"
        meshProvider: "linkerd"
        ingressClass: $INGRESS_CLASS
        slack.channel: "deploys"
        slack.url: "$SLACK_HOOK"
        podMonitor.enabled: true
        prometheus.install: false
        crd.create: false
      valuesFiles:

    flagger-loadtester:
      <<: *enabled
      description: "Load testing services generates traffic during canary analysis when configured as a webhook."
      group: "releases"
      namespace: "miscellaneous" 
      chart: "flagger/loadtester" 
      version: "0.22.0"
      priority: -59
      set:
        logLevel: "debug"
      valuesFiles:

  # Service Mesh Block (priority: -50) On minkube the limits from coreDNS must be removed in order to works!

    linkerd-certificates:
      <<: *enabled
      description: "Webhook certificates managed by cert-manager"
      group: "mesh"
      namespace: "linkerd"
      chart: "charts/linkerd-certificates"
      version: "1.0.1"
      priority: -50

    linkerd:
      <<: *mesh1
      description: "Linkerd service mesh for K8S"
      group: "mesh"
      namespace: "linkerd"
      chart: "linkerd/linkerd2"
      version: "2.10.2"
      priority: -49

    linkerd-viz-certificates:
      <<: *enabled
      description: "Webhook certificates managed by cert-manager"
      group: "mesh"
      namespace: "linkerd-viz"
      chart: "charts/linkerd-viz-certificates"
      version: "1.0.1"
      priority: -48

    linkerd-viz:
      <<: *mesh2
      description: "Linkerd Viz"
      group: "mesh"
      namespace: "linkerd-viz"
      chart: "linkerd/linkerd-viz"
      version: "2.10.2"
      priority: -47

  # Third-party tools (priority: -40)

    loft-configs:
      <<: *enabled
      description: "Create, manage Loft Spaces/vCluster/Isolations and so on."
      group: "miscellaneous"
      namespace: "loft"
      chart: "charts/loft-config"
      version: "1.0.0"
      priority: -40
      set:
        spaces.enabled: true
        spaces.names[0]: "glaedr"
        spaces.sleepmode.enabled: true
        spaces.annotations.sleepmode\.loft\.sh/sleep-schedule: "0 19 * * *"
        spaces.annotations.sleepmode\.loft\.sh/timezone: "Europe/Berlin"
        spaces.annotations.sleepmode\.loft\.sh/wakeup-schedule: "0 10 * * 1-5"
        vclusters.enabled: true
        serviceMonitor.enabled: true
        serviceMonitor.namespace: loft

    helm-exporter:
      <<: *disabled
      description: "Exports helm release, chart, and version statistics in the prometheus format."
      group: "miscellaneous"
      namespace: "miscellaneous"
      chart: "sstarcher/helm-exporter"
      version: "1.2.2+6766a95"
      priority: -39
      set:
        ingress.enabled: false
        ingress.annotations.kubernetes\.io/ingress\.class: "$INGRESS_CLASS"
        ingress.hosts[0].host: "helm-exporter.$K8SCLUSTER.$K8S_DOMAIN"
        ingress.hosts[0].paths[0]: "/"
        serviceMonitor.create: true
        serviceMonitor.additionalLabels.release: "prometheus"

    teleport-cluster:
      <<: *disabled
      description: "Loki: like Prometheus, but for logs."
      group: "miscellaneous"
      namespace: "security"
      chart: "teleport/teleport-cluster"
      version: "9.3.3"
      priority: -38
      set:
        clusterName: "$K8SCLUSTER"
        kubeClusterName: "$K8SCLUSTER"
