metadata:
  scope: "epic-dev-euc1r-cluster"

settings:
  kubeContext: "epic-dev-euc1r-cluster"
  storageBackend: "secret"
  slackWebhook:  "https://hooks.slack.com/services/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"
  #reverseDelete: false # reverse the priorities on delete
  globalMaxHistory: 500
  reverseDelete: true

namespaces:
  linkerd:
    protected: false
    annotations:
      linkerd.io/inject: disabled
    labels:
      linkerd.io/is-control-plane: "true"
      config.linkerd.io/admission-webhooks: disabled
      linkerd.io/control-plane-ns: "linkerd"
  linkerd-viz:
    protected: false
    labels:
      linkerd.io/extension: viz
    annotations:
      linkerd.io/inject: enabled
      viz.linkerd.io/external-prometheus: $PROMETHEUS_DEVEUC1R
  devtroncd:
    protected: false

apps:

  # Monitoring Block (priority: -140)

    metrics-server:
      description: "Manager SSL certficates creation, renew and update."
      group: "monitoring"
      namespace: "monitoring"
      enabled: false
      protected: false
      chart: "metrics-server"
      version: "2.9.0"
      valuesFiles: 
        - "metrics-server/values.yaml"
      wait: true
      timeout: 300
      maxHistory: 100
      test: false
      priority: -140
      helmFlags:
        - "--atomic"

    prometheus:
      description: "Prometheus clusters atop Kubernetes"
      group: "monitoring"
      namespace: "monitoring"
      enabled: false
      protected: false
      chart: "kube-prometheus-stack"
      version: "18.0.0"
      valuesFiles: 
        - "kube-prometheus-stack/values-custom.yaml"
      wait: true
      timeout: 300
      maxHistory: 100
      test: true
      priority: -139
      set:
        grafana.enabled: false
        alertmanager.ingress.enabled: true
        alertmanager.ingress.ingressClassName: $INGRESS_CLASS
        alertmanager.ingress.hosts: "{alertmanager.$CLUSTER_DEVEUC1R}"
        prometheus.ingress.enabled: true
        prometheus.ingress.ingressClassName: $INGRESS_CLASS
        prometheus.ingress.hosts: "{prometheus.$CLUSTER_DEVEUC1R}"
        kubeControllerManager.enabled: true
        kubeScheduler.enabled: true
        kubeEtcd.enabled: false
        kubeDns.enabled: false
      helmFlags:
        - "--atomic"

    grafana-operator:
      description: "Kubernetes Operator based on the Operator SDK for creating and managing Grafana instances and dashboards."
      group: "monitoring"
      namespace: "monitoring"
      enabled: false
      protected: false
      chart: "grafana-operator"
      version: "1.0.1"
      valuesFiles: 
        - "grafana-operator/values.yaml"
      wait: true
      timeout: 300
      maxHistory: 100
      test: true
      priority: -138
      set:
        grafana.ingress.hostname: grafana.$CLUSTER_DEVEUC1R
        grafana.ingress.annotations.kubernetes\.io/ingress\.class: $INGRESS_CLASS
      helmFlags:
        - "--atomic"

    grafana-operator-configs:
      description: "Kubernetes Operator based on the Operator SDK for creating and managing Grafana instances and dashboards."
      group: "monitoring"
      namespace: "monitoring"
      enabled: false
      protected: false
      chart: "grafana-operator-configs"
      version: "1.0.0"
      wait: true
      timeout: 300
      maxHistory: 100
      test: true
      priority: -137
      helmFlags:
        - "--atomic"

  # Logging Block (priority: -130)

    loki:
      description: "Loki: like Prometheus, but for logs."
      group: "logging"
      namespace: "monitoring"
      enabled: false
      protected: false
      chart: "grafana/loki-stack"
      version: "2.3.0"
      valuesFiles: 
        - "loki-stack/values.yaml"
      wait: true
      timeout: 300
      maxHistory: 100
      test: true
      priority: -129
      set:
        ingress.annotations.kubernetes\.io/ingress\.class: $INGRESS_CLASS
        ingress.hosts\.host[0]: "loki.$CLUSTER_GLAEDR"
      helmFlags:
        - "--atomic"

  # Security block (priority: -120)

    kyverno:
      description: "Kubernetes Native Policy Management"
      group: "security"
      namespace: "security" 
      enabled: true
      protected: true
      chart: "kyverno" 
      version: "1.2.1" 
      valuesFiles: 
        - "kyverno/values.yaml" 
      test: true
      priority: -120
      wait: true
      hooks:
        successCondition: "Complete"
        successTimeout: "90s"
        deleteOnSuccess: true
      helmFlags:
        - "--atomic"

    cert-manager:
      description: "Manager SSL certficates creation, renew and update."
      group: "security"
      namespace: "cert-manager"
      enabled: false
      protected: false
      chart: "cert-manager"
      version: "v1.4.2"
      valuesFiles: 
        - "cert-manager/values.yaml"
      wait: true
      timeout: 300
      maxHistory: 100
      test: true
      priority: -119
      helmFlags:
        - "--atomic"

  # Ingress Block (priority: -110)

    contour:
      description: "High performance ingress controller for Kubernetes"
      group: "ingress"
      namespace: "ingress"
      enabled: true
      chart: "contour"
      version: "5.5.3"
      wait: true
      timeout: 300
      maxHistory: 100
      test: true
      priority: -110
      set:
        replicaCount: 3
        configInline.incluster: true
        default.backend.enabled: true
        envoy.containerPorts.https: 80
        envoy.service.annotations.service\.beta\.kubernetes\.io/aws-load-balancer-type: nlb
        envoy.service.annotations.service\.beta\.kubernetes\.io/aws-load-balancer-proxy-protocol: '*'
        envoy.service.annotations.service\.beta\.kubernetes\.io/aws-load-balancer-ssl-ports: "https"
        envoy.service.annotations.service\.beta\.kubernetes\.io/aws-load-balancer-backend-protocol: "http"
        envoy.service.annotations.service\.beta\.kubernetes\.io/aws-load-balancer-ssl-cert: arn:aws:acm:eu-central-1:329489003955:certificate/125ba8af-c3c8-47f7-9a86-658100f8b09f
        envoy.service.annotations.service\.beta\.kubernetes\.io/aws-load-balancer-additional-resource-tags: "Maintainers=Team:DevOps"
      helmFlags:
        - "--atomic"

    nginx:
      description: "Nginx-Ingress Controller for K8S"
      group: "ingress"
      namespace: "ingress"
      enabled: false
      protected: true
      chart: "ingress-nginx"
      version: "3.12.0"
      valuesFiles: 
        - "ingress-nginx/values.yaml"
      wait: true
      timeout: 300
      maxHistory: 100
      test: true
      priority: -109
      set:
        controller.metrics.enabled: true
        controller.metrics.serviceMonitor.enabled: true
      helmFlags:
        - "--atomic"

    traefik:
      description: "Edge Router that makes publishing your services a fun and easy experience"
      group: "ingress"
      namespace: "ingress"
      enabled: false
      protected: true
      chart: "traefik"
      version: "9.18.2"
      hooks:
        successCondition: "Complete"
        deleteOnSuccess: true
      valuesFiles: 
        - "traefik/values.yaml"
      wait: true
      timeout: 300
      maxHistory: 100
      test: true
      priority: -108
      set:

      helmFlags:
        - "--atomic"

  # Observability & Tracing Block (priority: -90)

    botkube:
      description: "Botkube is a messaging bot for monitoring and debugging Kubernetes clusters"
      group: "observers"
      namespace: "observability"
      enabled: true
      protected: false
      chart: "botkube"
      version: "v0.12.0"
      valuesFiles: 
        - "botkube/values.yaml"
      wait: true
      timeout: 300
      maxHistory: 100
      test: true
      priority: -90
      set:
        config.settings.clustername: $CLUSTER_DEVEUC1R
        serviceMonitor.enabled: true
      helmFlags:
        - "--atomic"

  # CI/CD Block (priority: -90)
    devtron:
      description: "A delivery workflow for kubernetes"
      group: "cicd"
      namespace: "devtroncd"
      enabled: true
      protected: false
      chart: "devtron/devtron-operator"
      version: "v0.11.0"
      wait: true
      timeout: 300
      maxHistory: 100
      test: true
      priority: -80
      set:
      helmFlags:
        - "--atomic"

  # Service Mesh Block (priority: -60) On minkube the limits from coreDNS must be removed in order to works!

    linkerd2:
      description: "Linkerd service mesh for K8S"
      group: "mesh"
      namespace: "linkerd"
      enabled: true
      protected: false
      chart: "linkerd2"
      version: "2.10.2"
      hooks:
        preInstall: "bash -x linkerd_step.sh main"
        preUpgrade: "bash -x linkerd_step.sh main"
        # Uncomment the line below if linkerd-viz is not necessary
        # postInstall: "bash -x linkerd_step.sh cleanUp"
      wait: false
      timeout: 300
      maxHistory: 100
      test: true
      priority: -60
      # add values-ha.yaml for HA
      valuesFiles:
        - "linkerd2/values.yaml"
        - "linkerd2/values-ha.yaml"
      setFile:
        identityTrustAnchorsPEM: linkerd2/certs/plane/ca.crt
        proxyInjector.caBundle: linkerd2/certs/plane/ca.crt
        profileValidator.caBundle: linkerd2/certs/plane/ca.crt
      set:
        identity.issuer.scheme: "kubernetes.io/tls"
        identity.externalIssuer: true
        proxyInjector.externalSecret: true
        profileValidator.externalSecret: true
        identity.issuer.crtExpiry: $EXP
        installNamespace: "false"
      helmFlags:
        - "--atomic"

    linkerd2-viz:
      description: "Linkerd Viz"
      group: "mesh"
      namespace: "linkerd-viz"
      enabled: true
      protected: false
      chart: "linkerd-viz"
      version: "2.10.2"
      wait: false
      timeout: 300
      maxHistory: 100
      test: true
      priority: -59
      hooks:
        preInstall: "bash -x linkerd_step.sh secrets_linkerd_viz"
        postInstall: "bash -x linkerd_step.sh cleanUp"
      # add values-ha.yaml for HA
      valuesFiles:
        - "linkerd-viz/values.yaml"
        - "linkerd-viz/values-ha.yaml"
      setFile:
        tap.caBundle: linkerd2/certs/plane/ca.crt
        tapInjector.caBundle: linkerd2/certs/plane/ca.crt
      set:
        installNamespace: false
        tap.externalSecret: true
        tapInjector.externalSecret: true
        tap.replicas: 1
        grafana.enabled: true
        # grafanaUrl: $GLAEDR_GRAFANA
        prometheus.enabled: true
        # prometheusUrl: $GLAEDR_PROMETHEUS
      helmFlags:
        - "--atomic"

  # Deployments & Automated Releases (priority: -50)

    flagger:
      description: "A progressive delivery tool that automates the release process for applications running on Kubernetes."
      group: "releases"
      namespace: "miscellaneous" 
      enabled: true
      protected: false
      chart: "flagger" 
      version: "1.12.1"
      valuesFiles: 
        - "flagger/values.yaml" 
      test: true
      priority: -50
      wait: true
      hooks:
        successCondition: "Complete"
        successTimeout: "90s"
        deleteOnSuccess: true
      set:
        logLevel: "debug"
        meshProvider: "linkerd"
        ingressClass: "contour"
        slack.channel: "deploys"
        slack.url: "https://hooks.slack.com/services/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"
        podMonitor.enabled: true
        prometheus.install: false
        crd.create: false
      helmFlags: 
        - "--atomic"

    flagger-loadtester:
      description: "Load testing services generates traffic during canary analysis when configured as a webhook."
      group: "releases"
      namespace: "miscellaneous" 
      enabled: true
      protected: false
      chart: "flagger-loadtester" 
      version: "0.18.0"
      valuesFiles: 
        - "flagger-loadtester/values.yaml" 
      test: true
      priority: -49
      wait: true
      set:
        logLevel: "debug"
      helmFlags: 
        - "--atomic"
