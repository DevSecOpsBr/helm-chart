metadata:
  org: "DevOps"
  maintainer: "devops team (devops@ellesmera.io)"
  description: "Kubernetes clusters"

settings:
  kubeContext: $K8SCLUSTER
  storageBackend: "secret"
  slackWebhook: $SLACK_HOOK

# define your helm repositories
helmRepos:
  # cert-manager
  jetstack: https://charts.jetstack.io
  # BotKube is a messaging bot for monitoring and debugging Kubernetes clusters
  infracloudio: https://infracloudio.github.io/charts
  # A scalable, efficient source of container resource metrics for Kubernetes built-in autoscaling pipelines.
  metrics-server: https://kubernetes-sigs.github.io/metrics-server
  # Keyverno policy engine designed for Kubernetes
  kyverno: https://kyverno.github.io/kyverno/
  # Kubecost helps you monitor and manage cost and capacity in Kubernetes environments.
  kubecost: https://kubecost.github.io/cost-analyzer/
  # extended component suite for Kubernetes, which mainly focuses on 
  # application automations, such as deployment, upgrade, ops and availability protection.
  openkruise: https://openkruise.github.io/charts/


# define your environments and their k8s namespaces
namespaces:
  cert-manager:
    protected: false
    annotations:
      linkerd.io/inject: disabled
  chaos:
    protected: false
    annotations:
      linkerd.io/inject: disabled
  ingress:
    protected: false
    annotations:
      linkerd.io/inject: disabled
  loft:
    protected: false
    annotations:
      linkerd.io/inject: disabled
  miscellaneous:
    protected: false
    annotations:
      linkerd.io/inject: disabled
  monitoring:
    protected: false
    annotations:
      linkerd.io/inject: disabled
    labels:
      control-plane: controller-manager
  observability:
    protected: false
    annotations:
      linkerd.io/inject: disabled
  security:
    protected: false
    annotations:
      linkerd.io/inject: disabled
  velero:
    protected: false
    annotations:
      linkerd.io/inject: disabled
  kubecost:
    protected: false

appsTemplates:

  is_in_use: &enabled
    enabled: true
    test: true
    wait: true
    protected: false
    timeout: 300
    helmFlags:
      - "--atomic"

  not_in_use: &disabled
    enabled: false

apps:

  # Monitoring Block (priority: -160)

    metrics-server:
      # Enable if running via lima and/or minikube
      <<: *disabled
      description: "Manager SSL certficates creation, renew and update."
      group: "monitoring"
      namespace: "monitoring"
      chart: "charts/metrics-server"
      version: "2.9.0"
      priority: -160
      valuesFiles:
        - "charts/metrics-server/values.yaml"

    kubecost:
      # Enable if running via lima and/or minikube
      <<: *enabled
      description: "A comprehensive cost monitoring & optimization solution for teams running Kubernetes."
      group: "cost"
      namespace: "kubecost"
      chart: "kubecost/cost-analyzer"
      version: " 1.94.3"
      priority: -159
      set:
        global.prometheus.enabled: false
        global.prometheus.fqdn: "http://prometheus.$K8SCLUSTER.$K8S_DOMAIN.monitoring.svc"
        global.prometheus.insecureSkipVerify: true 
        global.grafana.enabled: false
        global.grafana.domainName: grafana.$K8SCLUSTER.$K8S_DOMAIN.monitoring.svc
        ingress.enabled: true
        ingress.className: $INGRESS_CLASS
        ingress.hosts[0]: kubecost.$K8SCLUSTER.$K8S_DOMAIN
        kubecostToken: $KUBECOST
      valuesFiles:

  # Security block (priority: -120)

    kyverno:
      <<: *enabled
      description: "Kubernetes Native Policy Management"
      group: "security"
      namespace: "security" 
      chart: "kyverno/kyverno" 
      version: "v2.1.10"
      priority: -120
      set:
        serviceMonitor.enabled: false
        serviceMonitor.additionalLabels.release: "prometheus"
        createSelfSignedCert: true
      valuesFiles:

    cert-manager:
      <<: *enabled
      description: "Manager SSL certficates creation, renew and update."
      group: "security"
      namespace: "cert-manager"
      chart: "jetstack/cert-manager"
      version: "v1.8.0"
      priority: -119
      set:
        installCRDs: true
        prometheus.serviceMonitor.enabled: true
      valuesFiles:

  # Ingress Block (priority: -110)

    ingress-classes:
      <<: *disabled
      description: "IngressClass for ingress controllers"
      group: "ingress"
      namespace: "ingress"
      chart: "charts/ingress-classes"
      version: "1.0.0"
      priority: -107
      valuesFiles:
        - "charts/ingress-classes/values.yaml"
