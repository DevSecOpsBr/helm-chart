metadata:
  scope: "glaedr"

settings:
  kubeContext: "rancher-desktop"
  storageBackend: "secret"
  slackWebhook: $SLACK_HOOK
  globalMaxHistory: 500
  reverseDelete: true

namespaces:
  clustering:
    protected: false
  linkerd:
    protected: false
    annotations:
      linkerd.io/inject: disabled
    labels:
      linkerd.io/is-control-plane: "true"
      config.linkerd.io/admission-webhooks: disabled
      linkerd.io/control-plane-ns: "linkerd"
  linkerd-viz:
    protected: false
    labels:
      linkerd.io/extension: viz
    annotations:
      linkerd.io/inject: enabled
      viz.linkerd.io/external-prometheus: $GLAEDR_PROMETHEUS

appsTemplates:

  in_use: &enabled
    enabled: true
    test: false
    wait: true
    timeout: 300
    helmFlags:
      - "--atomic"

  no_use: &disabled
    enabled: false

  linkerd: &mesh1
    enabled: true
    test: false
    wait: true
    timeout: 300
    hooks:
      preInstall: "bash -x linkerd_step.sh main"
      preUpgrade: "bash -x linkerd_step.sh main"
      postInstall: "linkerd check"
    setFile:
      identityTrustAnchorsPEM: linkerd/certs/plane/ca.crt
      proxyInjector.caBundle: linkerd/certs/plane/ca.crt
      profileValidator.caBundle: linkerd/certs/plane/ca.crt
    set:
      identity.issuer.scheme: "kubernetes.io/tls"
      identity.externalIssuer: true
      proxyInjector.externalSecret: true
      profileValidator.externalSecret: true
      identity.issuer.crtExpiry: $EXP
      installNamespace: "false"
    helmFlags:
      - "--atomic"

  linkerd_viz: &mesh2
    enabled: true
    test: false
    wait: false
    timeout: 300
    hooks:
      deleteOnSuccess: true
      preInstall: "bash -x linkerd_step.sh secrets_linkerd_viz"
      preUpgrade: "bash -x linkerd_step.sh secrets_linkerd_viz"
      successCondition: "Complete"
      postInstall: "linkerd check"
    setFile:
      tap.caBundle: linkerd/certs/plane/ca.crt
      tapInjector.caBundle: linkerd/certs/plane/ca.crt
    set:
      installNamespace: false
      tap.externalSecret: true
      tapInjector.externalSecret: true
      tap.replicas: 3
      grafana.enabled: true
      # grafanaUrl: $GLAEDR_GRAFANA
      prometheus.enabled: true
      # prometheusUrl: $GLAEDR_PROMETHEUS
      dashboard.enforcedHostRegexp: ".*"
    valuesFiles:
      - "linkerd-viz-certificates/templates/webhook-certificate.yaml"
      - "linkerd-viz-certificates/templates/tap-injector-certificate.yaml"
    helmFlags:
      - "--atomic"

apps:

  # Monitoring Block (priority: -140)

    prometheus:
      <<: *enabled
      description: "Prometheus clusters atop Kubernetes"
      group: "monitoring"
      namespace: "monitoring"
      chart: "kube-prometheus-stack"
      version: "34.10.0"
      priority: -139
      set:
        alertmanager.ingress.enabled: true
        alertmanager.ingress.ingressClassName: $GLAEDR_INGRESS
        alertmanager.ingress.hosts: "{alertmanager.$GLAEDR_INGRESS.$GLAEDR_CLUSTER}"
        grafana.enabled: false
        grafana.ingress.enabled: true
        grafana.ingress.hosts: "{grafana.$GLAEDR_INGRESS.$GLAEDR_CLUSTER}"
        prometheus.ingress.enabled: true
        prometheus.ingress.ingressClassName: $GLAEDR_INGRESS
        prometheus.ingress.hosts: "{prometheus.$GLAEDR_INGRESS.$GLAEDR_CLUSTER}"
        kubeControllerManager.enabled: false
        kubeScheduler.enabled: false
        kubeEtcd.enabled: true
        kubeDns.enabled: false
      valuesFiles: 
        - "kube-prometheus-stack/values-custom.yaml"

    grafana:
      <<: *disabled
      description: "Kubernetes Operator based on the Operator SDK for creating and managing Grafana instances and dashboards."
      group: "monitoring"
      namespace: "monitoring"
      chart: "grafana"
      version: "6.26.5"
      priority: -137
      set:
        ingress.enabled: true
        ingress.annotations.kubernetes\.io/ingress\.class: "nginx"
        ingress.hosts[0]: grafana.$GLAEDR_INGRESS.$GLAEDR_CLUSTER
      valuesFiles:

    grafana-operator:
      <<: *disabled
      description: "Kubernetes Operator based on the Operator SDK for creating and managing Grafana instances and dashboards."
      group: "monitoring"
      namespace: "monitoring"
      chart: "grafana-operator"
      version: "4.2.0"
      priority: -136
      valuesFiles:

    grafana-operator-configs:
      <<: *disabled
      description: "Kubernetes Operator based on the Operator SDK for creating and managing Grafana instances and dashboards."
      group: "monitoring"
      namespace: "monitoring"
      chart: "grafana-operator-configs"
      version: "1.0.0"
      priority: -135

    netdata:
      <<: *disabled
      description: "Netdata is a monitoring, visualization, and troubleshooting solution for systems, containers, services, and applications."
      group: "monitoring"
      namespace: "monitoring"
      chart: "netdata"
      version: "3.7.10"
      priority: -134
      set:
        ingress.enabled: true
        ingress.spec.ingressClassName: $GLAEDR_INGRESS
        ingress.annotations.kubernetes\.io/ingress\.class: $GLAEDR_INGRESS
        ingress.annotations.kubernetes\.io/tls-acme: "\"false\""
        ingress.hosts[0]: netdata.$GLAEDR_INGRESS.$GLAEDR_CLUSTER
        notifications.slackurl: SLACK_WEBHOOK_URL=$SLACK_HOOK
        notifications.slackrecipiet: "monitoring"
        parent.claiming.enabled: true
        parent.claiming.token: $NETDATA_TOKEN
        parent.claiming.rooms: $NETDATA_ROOMS
        parent.claiming.url: https://app.netdata.cloud
        child.claiming.enabled: true
        child.claiming.rooms: $NETDATA_ROOMS

  # Logging Block (priority: -130)

    loki:
      <<: *disabled
      description: "Loki: like Prometheus, but for logs."
      group: "logging"
      namespace: "monitoring"
      chart: "loki-stack"
      version: "2.3.1"
      priority: -129
      valuesFiles: 
        - "loki-stack/values.yaml"
      set:
        ingress.annotations.kubernetes\.io/ingress\.class: $GLAEDR_INGRESS
        ingress.hosts\.host[0]: "loki.$GLAEDR_INGRESS.$GLAEDR_CLUSTER"

  # Security block (priority: -120)

  # Ingress Block (priority: -110)

    metallb:
      <<: *enabled
      description: "Load Balancer management for minikube"
      group: "ingress"
      namespace: "ingress"
      chart: "metallb"
      version: "0.12.1"
      priority: -110  # Increased due to minikube ip conflicts
      set:
        # controller.nodeSelector.node-role\.kubernetes\.io/master: ""
        # speaker.nodeSelector.node-role\.kubernetes\.io/master: ""
        prometheusRule.enabled: true
        prometheusRUles.additionalLabels.release: "prometheus"
      valuesFiles:
        - "metallb/values.yaml"

    contour:
      <<: *disabled
      description: "High performance ingress controller for Kubernetes"
      group: "ingress"
      namespace: "ingress"
      chart: "contour"
      version: "7.8.0"
      priority: -109  # Increased due to minikube ip conflicts
      set:
        replicaCount: 1
        configInline.incluster: true
        default.backend.enabled: false
        envoy.serviceAccount.automountServiceAccountToken: true
        # envoy.podAnnotations.linkerd\.io/inject: "ingress"
        prometheus.serviceMonitor.enabled: true
        # envoy.nodeSelector.node-role\.kubernetes\.io/master: ""
        # envoy.service.externalIPs: "{${GLAEDR_IPADDR_1}}"
      # valuesFiles:
        # - "contour/values.yaml"

    nginx:
      <<: *disabled
      description: "Nginx-Ingress Controller for K8S"
      group: "ingress"
      namespace: "ingress"
      chart: "ingress-nginx"
      version: "3.12.0"
      priority: -108
      set:
        controller.metrics.enabled: true
        controller.metrics.serviceMonitor.enabled: true
        controller.metrics.serviceMonitor.additionalLabels.release: "prometheus" 
        defaultBackend.enabled: false
        ### Uncomment the line below for mesh support ###
        # controller.podAnnotations.linkerd\.io/inject: "ingress"
        # controller.nodeSelector.node-role\.kubernetes\.io/master: ""
        # defaultBackend.nodeSelector.node-role\.kubernetes\.io/master: ""
        # controller.service.externalIPs: "{${GLAEDR_IPADDR_2}}"
        # defaultBackend.service.externalIPs: "{${GLAEDR_IPADDR_2}}"

    traefik:
      <<: *enabled
      description: "Edge Router that makes publishing your services a fun and easy experience"
      group: "ingress"
      namespace: "ingress"
      chart: "traefik"
      version: "10.19.4"
      priority: -107
      set:
        ports.traefik.expose: true
        additionalArguments[0]: "--metrics.prometheus=true"
        additionalArguments[1]: "--ping"
        additionalArguments[2]: "--log.format=json"
        additionalArguments[3]: "--accesslog=true"
        additionalArguments[4]: "--api.dashboard=true"
        deployment.podLabels.release: "prometheus"
        ingressClass.enabled: true
        # nodeSelector.node-role\.kubernetes\.io/master: ""
        # service.externalIPs: "{${GLAEDR_IPADDR_3}}"

  # Observability & Tracing Block (priority: -90)

  # Loft (priority: -80)
    
    loft:
      <<: *enabled
      description: "Namespace & Virtual Cluster Manager for Kubernetes"
      group: "clustering"
      namespace: "clustering"
      chart: "loft"
      version: "2.1.8"
      priority: -80
      set:
        serviceMonitor.enabled: true
        ingress.enabled: true
        ingress.host: loft.$GLAEDR_INGRESS.$GLAEDR_CLUSTER
        ingress.ingressClass: $GLAEDR_INGRESS
        ingress.tls.enabled: false
        apiService.enabled: true
        labels.release: "prometheus"

    loft-agent:
      <<: *disabled
      description: "Namespace & Virtual Cluster Manager for Kubernetes"
      group: "clustering"
      namespace: "clustering"
      chart: "loft-agent"
      version: "2.1.8"
      priority: -79
      set:
        serviceMonitor.enabled: true
        ingress.enabled: true
        ingress.host: loft-agent.$GLAEDR_INGRESS.$GLAEDR_CLUSTER
        ingress.ingressClass: $GLAEDR_INGRESS
        ingress.tls.enabled: false
        apiService.enabled: true
        labels.release: "prometheus"
    
    loft-configs:
      <<: *enabled
      description: "Config, create, managed Spaces/vCluster/Isolations and so on."
      group: "clustering"
      namespace: "clustering"
      chart: "loft-config"
      version: "1.0.0"
      priority: -78
      set:
        spaces.enabled: true
        spaces.names[0]: "saphira"
        spaces.names[1]: "firnen"
        spaces.names[2]: "ophelia"
        vclusters.enabled: false

  # Deployments & Automated Releases (priority: -60)

    flagger:
      <<: *enabled
      description: "A progressive delivery tool that automates the release process for applications running on Kubernetes."
      group: "releases"
      namespace: "miscellaneous" 
      chart: "flagger" 
      version: "1.20.0"
      priority: -60
      set:
        logLevel: "debug"
        meshProvider: "linkerd"
        ingressClass: "contour"
        slack.channel: "deploys"
        slack.url: "$SLACK_HOOK"
        podMonitor.enabled: true
        prometheus.install: false
        crd.create: false

    flagger-loadtester:
      <<: *enabled
      description: "Load testing services generates traffic during canary analysis when configured as a webhook."
      group: "releases"
      namespace: "miscellaneous" 
      chart: "flagger-loadtester" 
      version: "0.22.0"
      priority: -59
      set:
        logLevel: "debug"

  # Service Mesh Block (priority: -50) On minkube the limits from coreDNS must be removed in order to works!

    linkerd-certificates:
      <<: *disabled
      description: "Webhook certificates managed by cert-manager"
      group: "mesh"
      namespace: "linkerd"
      chart: "linkerd-certificates"
      version: "1.0.1"
      priority: -50

    linkerd:
      <<: *disabled
      description: "Linkerd service mesh for K8S"
      group: "mesh"
      namespace: "linkerd"
      chart: "linkerd"
      version: "2.10.2"
      priority: -49

    linkerd-viz-certificates:
      <<: *disabled
      description: "Webhook certificates managed by cert-manager"
      group: "mesh"
      namespace: "linkerd-viz"
      chart: "linkerd-viz-certificates"
      version: "1.0.1"
      priority: -48

    linkerd-viz:
      <<: *disabled
      description: "Linkerd Viz"
      group: "mesh"
      namespace: "linkerd-viz"
      chart: "linkerd-viz"
      version: "2.10.2"
      priority: -47

  # Helm Export (priority: -40)

    helm-exporter:
      <<: *disabled
      description: "Exports helm release, chart, and version statistics in the prometheus format."
      group: "miscellaneous"
      namespace: "miscellaneous"
      chart: "helm-exporter"
      version: "1.2.2+6766a95"
      priority: -40
      set:
        ingress.enabled: true
        ingress.annotations.kubernetes\.io/ingress\.class: "nginx"
        ingress.hosts[0].host: "helm-exporter.$GLAEDR_INGRESS.$GLAEDR_CLUSTER"
        ingress.hosts[0].paths[0]: "/"
        serviceMonitor.create: true
        serviceMonitor.additionalLabels.release: "prometheus"
