metadata:
  org: "glaedr.local"
  description: "Glaedr Cluster Desired State File."

settings:
  kubeContext: "glaedr.local" # will try connect to this context first, if it does not exist, it will be created using the details below
  storageBackend: "secret"
  slackWebhook:  "https://hooks.slack.com/services/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"
  #reverseDelete: false # reverse the priorities on delete
  globalHooks:
    successCondition: "Complete"
    deleteOnSuccess: true
  globalMaxHistory: 500
  reverseDelete: true

namespaces:
  linkerd:
    protected: false
    annotations:
      linkerd.io/inject: disabled
    labels:
      linkerd.io/is-control-plane: "true"
      config.linkerd.io/admission-webhooks: disabled
      linkerd.io/control-plane-ns: "linkerd"
  linkerd-viz:
    protected: false
    labels:
      linkerd.io/extension: viz
    annotations:
      linkerd.io/inject: enabled
      viz.linkerd.io/external-prometheus: $GLAEDR_PROMETHEUS

appsTemplates:

  in_use: &enabled
    enabled: true
    test: true
    wait: true
    timeout: 300
    helmFlags:
      - "--atomic"

  no_use: &disabled
    enabled: false

  linkerd: &mesh1
    enabled: true
    test: false
    wait: false
    timeout: 300
    hooks:
      preInstall: "bash -x linkerd_step.sh main"
      preUpgrade: "bash -x linkerd_step.sh main"
      # postInstall: "bash -x linkerd_step.sh cleanUp"
    setFile:
      identityTrustAnchorsPEM: linkerd2/certs/plane/ca.crt
      proxyInjector.caBundle: linkerd2/certs/plane/ca.crt
      profileValidator.caBundle: linkerd2/certs/plane/ca.crt
    set:
      identity.issuer.scheme: "kubernetes.io/tls"
      identity.externalIssuer: true
      proxyInjector.externalSecret: true
      profileValidator.externalSecret: true
      identity.issuer.crtExpiry: $EXP
      installNamespace: "false"
    helmFlags:
      - "--atomic"

  linkerd_viz: &mesh2
    enabled: true
    test: false
    wait: false
    timeout: 300
    hooks:
      preInstall: "bash -x linkerd_step.sh secrets_linkerd_viz"
      postInstall: "bash -x linkerd_step.sh cleanUp"
    setFile:
      tap.caBundle: linkerd2/certs/plane/ca.crt
      tapInjector.caBundle: linkerd2/certs/plane/ca.crt
    set:
      installNamespace: false
      tap.externalSecret: true
      tapInjector.externalSecret: true
      tap.replicas: 1
      grafana.enabled: true
      grafanaUrl: $GLAEDR_GRAFANA
      prometheus.enabled: true
      prometheusUrl: $GLAEDR_PROMETHEUS
    # helmFlags:
    #   - "--atomic"

apps:

  # Monitoring Block (priority: -140)

    metrics-server:
      <<: *enabled
      description: "Manager SSL certficates creation, renew and update."
      group: "monitoring"
      namespace: "monitoring"
      chart: "metrics-server"
      version: "2.9.0"
      priority: -140
      protected: true
      valuesFiles: 
        - "metrics-server/values.yaml"

    prometheus:
      <<: *enabled
      description: "Prometheus clusters atop Kubernetes"
      group: "monitoring"
      namespace: "monitoring"
      chart: "kube-prometheus-stack"
      version: "18.0.0"
      valuesFiles: 
        - "kube-prometheus-stack/values-custom.yaml"
      priority: -139
      set:
        alertmanager.ingress.enabled: true
        alertmanager.ingress.ingressClassName: $INGRESS_CLASS
        alertmanager.ingress.hosts: "{alertmanager.$CLUSTER_GLAEDR}"
        grafana.enabled: false
        prometheus.ingress.enabled: true
        prometheus.ingress.ingressClassName: $INGRESS_CLASS
        prometheus.ingress.hosts: "{prometheus.$CLUSTER_GLAEDR}"
        kubeControllerManager.enabled: false
        kubeScheduler.enabled: false
        kubeEtcd.enabled: false
        kubeDns.enabled: false

    grafana-operator:
      <<: *enabled
      description: "Kubernetes Operator based on the Operator SDK for creating and managing Grafana instances and dashboards."
      group: "monitoring"
      namespace: "monitoring"
      chart: "grafana-operator"
      version: "1.0.1"
      valuesFiles: 
        - "grafana-operator/values.yaml"
      priority: -138
      set:
        grafana.ingress.hostname: grafana.$CLUSTER_GLAEDR
        grafana.ingress.annotations.kubernetes\.io/ingress\.class: "{$INGRESS_CLASS}"

    grafana-operator-configs:
      <<: *disabled
      description: "Kubernetes Operator based on the Operator SDK for creating and managing Grafana instances and dashboards."
      group: "monitoring"
      namespace: "monitoring"
      chart: "grafana-operator-configs"
      version: "1.0.0"
      priority: -137

  # Logging Block (priority: -130)

    loki:
      <<: *enabled
      description: "Loki: like Prometheus, but for logs."
      group: "logging"
      namespace: "monitoring"
      chart: "grafana/loki-stack"
      version: "2.3.0"
      priority: -129
      valuesFiles: 
        - "loki-stack/values.yaml"
      set:
        ingress.annotations.kubernetes\.io/ingress\.class: $INGRESS_CLASS
        ingress.hosts\.host[0]: "loki.$CLUSTER_GLAEDR"

  # Security block (priority: -120)

    kyverno:
      <<: *disabled
      description: "Kubernetes Native Policy Management"
      group: "security"
      namespace: "security" 
      chart: "kyverno" 
      version: "1.2.1"
      priority: -120 
      protected: true
      valuesFiles: 
        - "kyverno/values.yaml"

    cert-manager:
      <<: *enabled
      description: "Manager SSL certficates creation, renew and update."
      group: "security"
      namespace: "cert-manager"
      chart: "cert-manager"
      version: "v1.4.2"
      priority: -119
      valuesFiles: 
        - "cert-manager/values.yaml"

  # Ingress Block (priority: -110)

    contour:
      <<: *enabled
      description: "High performance ingress controller for Kubernetes"
      group: "ingress"
      namespace: "ingress"
      chart: "bitnami/contour"
      version: "5.0.1"
      priority: -110
      set:
        replicaCount: 2
        configInline.incluster: true
        envoy.service.externalIPs: "{${GLAEDR_IPADDR}}"
        envoy.service.ports.http: 8081
        envoy.service.ports.https: 8082
        envoy.nodeSelector.node-role\.kubernetes\.io/master: ""
        default.backend.enabled: false

    nginx:
      <<: *disabled
      description: "Nginx-Ingress Controller for K8S"
      group: "ingress"
      namespace: "ingress"
      chart: "ingress-nginx/ingress-nginx"
      version: "3.36.0"
      priority: -109
      set:
        controller.service.externalIPs: "{${GLAEDR_IPADDR}}"
        controller.service.ports.http: 8083
        controller.service.ports.https: 8084
        controller.metrics.enabled: true
        controller.metrics.serviceMonitor.enabled: true
        defaultBackend.service.externalIPs: "{${GLAEDR_IPADDR}}"
        defaultBackend.service.servicePort: 8085

    traefik:
      <<: *enabled
      description: "Edge Router that makes publishing your services a fun and easy experience"
      group: "ingress"
      namespace: "ingress"
      chart: "traefik"
      version: "9.18.2"
      priority: -108
      valuesFiles: 
        - "traefik/values.yaml"
      set:
        ports.traefik.expose: true
        ports.web.exposedPort: 8086
        ports.websecure.exposedPort: 8087
        service.externalIPs: "{${GLAEDR_IPADDR}}"

    ingress-classes:
      <<: *disabled
      description: "IngressClass for ingress controllers"
      group: "ingress"
      namespace: "ingress"
      chart: "ingress-classes"
      version: "1.0.0"
      priority: -107
      valuesFiles:
        - "ingress-classes/values.yaml"
      # helmFlags:
      #   - "--atomic"

  # Observability & Tracing Block (priority: -90)

    botkube:
      <<: *enabled
      description: "Botkube is a messaging bot for monitoring and debugging Kubernetes clusters"
      group: "observers"
      namespace: "observability"
      chart: "botkube"
      version: "v0.12.0"
      priority: -90
      protected: true
      valuesFiles: 
        - "botkube/values.yaml"
      set:
        config.settings.clustername: $CLUSTER_GLAEDR
        serviceMonitor.enabled: true

  # Service Mesh Block (priority: -60) On minkube the limits from coreDNS must be removed in order to works!

    linkerd2:
      <<: *mesh1
      description: "Linkerd service mesh for K8S"
      group: "mesh"
      namespace: "linkerd"
      chart: "linkerd2"
      version: "2.10.2"
      priority: -60
      valuesFiles:
        - "linkerd2/values.yaml"

    linkerd2-viz:
      <<: *mesh2
      description: "Linkerd Viz"
      group: "mesh"
      namespace: "linkerd-viz"
      chart: "linkerd-viz"
      version: "2.10.2"
      priority: -59
      valuesFiles:
        - "linkerd-viz/values.yaml"

  # Deployments & Automated Releases (priority: -50)

    flagger:
      <<: *enabled
      description: "A progressive delivery tool that automates the release process for applications running on Kubernetes."
      group: "releases"
      namespace: "miscellaneous" 
      chart: "flagger" 
      version: "1.12.1"
      priority: -50
      valuesFiles: 
        - "flagger/values.yaml" 
      set:
        logLevel: "debug"
        meshProvider: "linkerd"
        ingressClass: "contour"
        slack.channel: "deploys"
        slack.url: "https://hooks.slack.com/services/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"
        podMonitor.enabled: true
        prometheus.install: false
        crd.create: false

    flagger-loadtester:
      <<: *enabled
      description: "Load testing services generates traffic during canary analysis when configured as a webhook."
      group: "releases"
      namespace: "miscellaneous" 
      chart: "flagger-loadtester" 
      version: "0.18.0"
      priority: -49
      protected: true
      valuesFiles: 
        - "flagger-loadtester/values.yaml" 
      set:
        logLevel: "debug"
