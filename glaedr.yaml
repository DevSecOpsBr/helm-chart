metadata:
  scope: "glaedr.local"

settings:
  kubeContext: "glaedr.local"
  storageBackend: "secret"
  slackWebhook:  "https://hooks.slack.com/services/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"
  globalMaxHistory: 500
  reverseDelete: true

namespaces:
  linkerd:
    protected: false
    annotations:
      linkerd.io/inject: disabled
    labels:
      linkerd.io/is-control-plane: "true"
      config.linkerd.io/admission-webhooks: disabled
      linkerd.io/control-plane-ns: "linkerd"
  linkerd-viz:
    protected: false
    labels:
      linkerd.io/extension: viz
    annotations:
      linkerd.io/inject: enabled
      viz.linkerd.io/external-prometheus: $GLAEDR_PROMETHEUS

appsTemplates:

  in_use: &enabled
    enabled: true
    test: false
    wait: true
    timeout: 300
    helmFlags:
      - "--atomic"

  no_use: &disabled
    enabled: false

  linkerd: &mesh1
    enabled: true
    test: false
    wait: true
    timeout: 300
    hooks:
      postInstall: "linkerd check"
    setFile:
      identityTrustAnchorsPEM: linkerd2/certs/plane/ca.crt
      proxyInjector.caBundle: linkerd2/certs/plane/ca.crt
      profileValidator.caBundle: linkerd2/certs/plane/ca.crt
    set:
      identity.issuer.scheme: "kubernetes.io/tls"
      identity.externalIssuer: true
      proxyInjector.externalSecret: true
      profileValidator.externalSecret: true
      identity.issuer.crtExpiry: $EXP
      installNamespace: "false"
    helmFlags:
      - "--atomic"

  linkerd_viz: &mesh2
    enabled: true
    test: false
    wait: false
    timeout: 300
    hooks:
      deleteOnSuccess: true
      successCondition: "Complete"
      postInstall: "linkerd check"
    setFile:
      tap.caBundle: linkerd2/certs/plane/ca.crt
      tapInjector.caBundle: linkerd2/certs/plane/ca.crt
    set:
      installNamespace: false
      tap.externalSecret: true
      tapInjector.externalSecret: true
      tap.replicas: 1
      grafana.enabled: true
      # grafanaUrl: $GLAEDR_GRAFANA
      prometheus.enabled: true
      # prometheusUrl: $GLAEDR_PROMETHEUS
      dashboard.enforcedHostRegexp: ".*"
    helmFlags:
      - "--atomic"

apps:

  # Monitoring Block (priority: -140)

    prometheus:
      <<: *enabled
      description: "Prometheus clusters atop Kubernetes"
      group: "monitoring"
      namespace: "monitoring"
      chart: "kube-prometheus-stack"
      version: "19.2.2"
      valuesFiles: 
        - "kube-prometheus-stack/values-custom.yaml"
      priority: -139
      set:
        alertmanager.ingress.enabled: true
        alertmanager.ingress.ingressClassName: $INGRESS_CLASS
        alertmanager.ingress.hosts: "{alertmanager.$CONTOUR_GLAEDR}"
        grafana.enabled: false
        prometheus.ingress.enabled: true
        prometheus.ingress.ingressClassName: $INGRESS_CLASS
        prometheus.ingress.hosts: "{prometheus.$CONTOUR_GLAEDR}"
        kubeControllerManager.enabled: false
        kubeScheduler.enabled: false
        kubeEtcd.enabled: false
        kubeDns.enabled: false

    grafana-operator:
      <<: *enabled
      description: "Kubernetes Operator based on the Operator SDK for creating and managing Grafana instances and dashboards."
      group: "monitoring"
      namespace: "monitoring"
      chart: "grafana-operator"
      version: "1.1.4"
      priority: -138
      set:
        grafana.ingress.enabled: true
        grafana.ingress.hostname: grafana.$NGINX_GLAEDR
        grafana.ingress.annotations.kubernetes\.io/ingress\.class: "nginx"
        operator.args.scanAllNamespaces: true
        dashboardLabelSelector.matchExpressions[1]: "\\{ key: group, operator: In, values: [ grafana ] \\}"
      valuesFiles:
        - "grafana-operator/values.yaml"

  # Logging Block (priority: -130)

    loki:
      <<: *enabled
      description: "Loki: like Prometheus, but for logs."
      group: "logging"
      namespace: "monitoring"
      chart: "grafana/loki-stack"
      version: "2.3.0"
      priority: -129
      valuesFiles: 
        - "loki-stack/values.yaml"
      set:
        ingress.annotations.kubernetes\.io/ingress\.class: $INGRESS_CLASS
        ingress.hosts\.host[0]: "loki.$CONTOUR_GLAEDR"

  # Security block (priority: -120)

  # Ingress Block (priority: -110)

    metallb:
      <<: *enabled
      description: "Load Balancer management for minikube"
      group: "ingress"
      namespace: "ingress"
      chart: "bitnami/metallb"
      version: "2.5.9"
      priority: -110  # Increased due to minikube ip conflicts
      valuesFiles:
        - "metallb/values.yaml"

    contour:
      <<: *enabled
      description: "High performance ingress controller for Kubernetes"
      group: "ingress"
      namespace: "ingress"
      chart: "bitnami/contour"
      version: "5.5.3"
      priority: -109  # Increased due to minikube ip conflicts
      set:
        replicaCount: 1
        configInline.incluster: true
        envoy.nodeSelector.node-role\.kubernetes\.io/master: ""
        default.backend.enabled: true
        envoy.serviceAccount.automountServiceAccountToken: true
        envoy.podAnnotations.linkerd\.io/inject: "ingress"
        prometheus.serviceMonitor.enabled: true

    nginx:
      <<: *enabled
      description: "Nginx-Ingress Controller for K8S"
      group: "ingress"
      namespace: "ingress"
      chart: "ingress-nginx/ingress-nginx"
      version: "4.0.3"
      priority: -108
      set:
        controller.metrics.enabled: true
        controller.metrics.serviceMonitor.enabled: true
        controller.podAnnotations.linkerd\.io/inject: "ingress"

    traefik:
      <<: *enabled
      description: "Edge Router that makes publishing your services a fun and easy experience"
      group: "ingress"
      namespace: "ingress"
      chart: "traefik"
      version: "9.18.2"
      priority: -107
      set:
        ports.traefik.expose: true
        deployment.podAnnotations.linkerd\.io/inject: "ingress"

  # Observability & Tracing Block (priority: -90)

    botkube:
      <<: *enabled
      description: "Botkube is a messaging bot for monitoring and debugging Kubernetes clusters"
      group: "observers"
      namespace: "observability"
      chart: "botkube"
      version: "v0.12.0"
      priority: -90
      set:
        config.settings.clustername: $GLAEDR
        config.settings.kubectl.restrictAccess: true
        serviceMonitor.enabled: true
        communications.slack.channel: "reports" 
        communications.slack.token: "$BOTKUBE"

  # Loft (priority: -80)
    
    loft:
      <<: *enabled
      description: "Namespace & Virtual Cluster Manager for Kubernetes"
      group: "management"
      namespace: "miscellaneous"
      chart: "loft"
      version: "1.15.0"
      priority: -80
      set:
        serviceMonitor.enabled: true
        ingress.host: loft.$NGINX_GLAEDR
        ingress.tls.enabled: false
    
    loft-spaces-vclusters:
      <<: *enabled
      description: "Config, create, managed Spaces/vCluster/Isolations and so on."
      group: "management"
      namespace: "miscellaneous"
      chart: "loft-config"
      version: "1.0.0"
      priority: -79
      set:
        spaces.enabled: true
        spaces.names[0]: "saphira"
        spaces.names[1]: "firnen"
        spaces.names[2]: "ophelia"
        vclusters.enabled: false

  # Service Mesh Block (priority: -60) On minkube the limits from coreDNS must be removed in order to works!

    linkerd-webhooks-certificates:
      <<: *enabled
      description: "Webhook certificates managed by cert-manager"
      group: "mesh"
      namespace: "linkerd"
      chart: "linkerd2_cert-manager"
      version: "1.0.1"
      priority: -60
      hooks:
        preInstall: "bash -x linkerd_step.sh main"
        preUpgrade: "bash -x linkerd_step.sh main"

    linkerd2:
      <<: *mesh1
      description: "Linkerd service mesh for K8S"
      group: "mesh"
      namespace: "linkerd"
      chart: "linkerd/linkerd2"
      version: "2.10.2"
      priority: -59

    linkerd-viz:
      <<: *mesh2
      description: "Linkerd Viz"
      group: "mesh"
      namespace: "linkerd-viz"
      chart: "linkerd/linkerd-viz"
      version: "2.10.2"
      priority: -58

  # Deployments & Automated Releases (priority: -50)

    flagger:
      <<: *enabled
      description: "A progressive delivery tool that automates the release process for applications running on Kubernetes."
      group: "releases"
      namespace: "miscellaneous" 
      chart: "flagger" 
      version: "1.12.1"
      priority: -50
      set:
        logLevel: "debug"
        meshProvider: "linkerd"
        ingressClass: "contour"
        slack.channel: "deploys"
        slack.url: "$SLACK_HOOK"
        podMonitor.enabled: true
        prometheus.install: false
        crd.create: false

    flagger-loadtester:
      <<: *enabled
      description: "Load testing services generates traffic during canary analysis when configured as a webhook."
      group: "releases"
      namespace: "miscellaneous" 
      chart: "flagger-loadtester" 
      version: "0.18.0"
      priority: -49
      set:
        logLevel: "debug"
