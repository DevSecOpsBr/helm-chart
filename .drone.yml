kind: pipeline
type: docker
name: helmsman

platform:
  os: linux
  arch: arm64

environment:
  HELM_CHARTS: "charts"
  PLUTO: "/usr/local/bin"

steps:

  - name: security_scanning
    image: tenable/terrascan
    pull: if-not-exists
    privileged: false
    detach: false
    failure: ignore
    commands:
      - terrascan scan -v -i helm -d $HELM_CHARTS
    when:
      status:
        - failure
        - success
      branch:
        - "CU-*"
      event:
        - push

  - name: helm_lint
    image: praqma/helmsman
    pull: if-not-exists
    privileged: false
    detach: false
    commands:
      - echo $K8SCLUSTER
      - echo $K8SCLUSTER | base64 -d > config
      - chmod 600 config
      - export KUBECONFIG=config
      - export CONTEXT=$(kubectl config current-context)
      - export K8SCLUSTER=$CONTEXT
      - kubectl get nodes -owide
      - time helmsman -e variables.env -f k8s_common.yaml -f k8s_general.yaml -verbose -skip-validation -no-banner -dry-run
    environment:
      K8SCLUSTER:
        from_secret: ${DRONE_DEPLOY_TO}
    when:
      status:
        - failure
        - success
      event:
        - promote
    depends_on:
      - security_scanning

  - name: k8s_deprecated_api
    image: alpine
    pull: if-not-exists
    privileged: false
    detach: false
    commands:
      - echo $K8SCLUSTER
      - echo $K8SCLUSTER | base64 -d > config
      - chmod 600 config
      - export KUBECONFIG=config
      - export CONTEXT=$(kubectl config current-context)
      - export K8SCLUSTER=$CONTEXT
      - apk update && apk add git curl bash
      - wget -q https://github.com/FairwindsOps/pluto/releases/download/v5.16.1/pluto_5.16.1_linux_arm64.tar.gz -O - | tar xz -C $PLUTO pluto
      - pluto detect-api-resources -owide
      - pluto detect-files -d $HELM_CHARTS
    environment:
      K8SCLUSTER:
        from_secret: ${DRONE_DEPLOY_TO}
    when:
      status:
        - failure
        - success
      event:
        - promote
      branch: 
        - "master"
    depends_on:
      - helm_lint

  - name: helm_deploy
    image: praqma/helmsman
    pull: if-not-exists
    privileged: false
    detach: false
    commands:
      - apk add step-cli curl openssl
      - curl --proto '=https' --tlsv1.2 -sSfL https://run.linkerd.io/install | sh
      - echo $K8SCLUSTER | base64 -d > config
      - chmod 600 config
      - export KUBECONFIG=config
      - export CONTEXT=$(kubectl config current-context)
      - export K8SCLUSTER=$CONTEXT
      - kubectl get nodes -owide
      - time helmsman -e variables.env -f k8s_common.yaml -f k8s_general.yaml -verbose -apply -no-banner
    environment:
      K8SCLUSTER:
        from_secret: ${DRONE_DEPLOY_TO}
    when:
      status:
        - "success"
      branch: 
        - "master"
      event:
        - promote
    depends_on:
      - helm_lint
      - k8s_deprecated_api

  - name: helm_destroy
    image: praqma/helmsman
    pull: if-not-exists
    privileged: false
    detach: false
    commands:
      - echo $K8SCLUSTER | base64 -d > config
      - chmod 600 config
      - export KUBECONFIG=config
      - export CONTEXT=$(kubectl config current-context)
      - export K8SCLUSTER=$CONTEXT
      - helm list --all-namespaces 
      - time helmsman -e variables.env -f k8s_common.yaml -f k8s_general.yaml -verbose -destroy -no-banner
    environment:
      K8SCLUSTER:
        from_secret: ${DRONE_DEPLOY_TO}
    when:
      status:
        - "success"
      branch:
        - "master"
      event:
        - rollback

  - name: notify_slack
    image: plugins/slack
    settings:
      webhook: $SLACK_WEBHOOK
      channel: deploys
      icon_url: https://www.pngkit.com/png/full/92-920674_drone-logo-png-transparent-drone-ci-logo.png
      template: >
        {{#success build.status}}
          build {{build.number}} status: *{{build.status}}*
          build link: {{build.link}}
          build author: {{build.author}}
          build ref: {{build.ref}}
          build event: {{build.event}}
          build commit: {{build.commit}}
          build branch: {{build.branch}}
          build deploy: {{build.deployTo}}
        {{else}}
          build {{build.number}} failed. Fix me please.
        {{/success}}
    environment:
      SLACK_WEBHOOK:
        from_secret: slack_webhook
    when:
      status:
        - failure
        - success
    depends_on:
      - helm_deploy
      - helm_destroy

trigger:
  repo:
    - rdgacarvalho/helm

---

kind: secret
name: slack_webhook
data: YNXmQMyjMOzDPI64Tvq6SlrzakTG/VG8o8t+BJvQMKwm0DbLrUn9vI6qMcZuF/3ucUHIuD4eJ8itp34mvP1l/CKZVWdQdTy6iz/PTvcGwz/2AlKGRq5u7Sabva8xxmxNllbQH4qfEUMzixNBuA==
