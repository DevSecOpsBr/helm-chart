metadata:
  scope: "oromis"
  description: "Oromis Cluster Desired State File."

settings:
  kubeContext: "oromis"
  storageBackend: "secret"
  slackWebhook:  "https://hooks.slack.com/services/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"
  globalMaxHistory: 500
  reverseDelete: true

appsTemplates:

  is_in_use: &enabled
    enabled: true
    test: true
    wait: true
    protected: false
    timeout: 300
    helmFlags:
      - "--atomic"
      - "--create-namespace"

  not_in_use: &disabled
    enabled: false

apps:

  # Observability & Tracing Block (priority: -90)

    botkube:
      <<: *enabled
      description: "Botkube is a messaging bot for monitoring and debugging Kubernetes clusters"
      group: "observers"
      namespace: "observability"
      chart: "botkube"
      version: "v0.12.4"
      priority: -290
      valuesFiles: 
        - "botkube/values.yaml"
      set:
        serviceMonitor.enabled: false
        config.settings.clustername: $OROMIS_CLUSTER

  # Monitoring Block (priority: -140)

  # Logging Block (priority: -130)

  # Security block (priority: -120)

  # Ingress Block (priority: -110)

    metallb:
      <<: *disabled
      description: "Load Balancer management for minikube"
      group: "ingress"
      namespace: "ingress"
      chart: "metallb"
      version: "2.5.11"
      priority: -110  # Increased due to minikube ip conflicts
      set:
        prometheusRule.enabled: false
        # controller.nodeSelector.node-role\.kubernetes\.io/master: ""
      valuesFiles:
        - "metallb/values.yaml"

    contour:
      <<: *disabled
      description: "High performance ingress controller for Kubernetes"
      group: "ingress"
      namespace: "ingress"
      chart: "contour"
      version: "5.5.3"
      priority: -109  # Increased due to minikube ip conflicts
      set:
        replicaCount: 1
        configInline.incluster: true
        default.backend.enabled: false
        # envoy.nodeSelector.node-role\.kubernetes\.io/master: ""
        envoy.serviceAccount.automountServiceAccountToken: true
        envoy.podAnnotations.linkerd\.io/inject: "ingress"
        envoy.service.externalIPs: "{${OROMIS_IPADDR_2}}"
        prometheus.serviceMonitor.enabled: false

    nginx:
      <<: *disabled
      description: "Nginx-Ingress Controller for K8S"
      group: "ingress"
      namespace: "ingress"
      chart: "ingress-nginx"
      version: "3.12.0"
      priority: -108
      set:
        controller.metrics.enabled: false
        controller.metrics.serviceMonitor.enabled: false
        controller.metrics.serviceMonitor.additionalLabels.release: "prometheus"
        controller.podAnnotations.linkerd\.io/inject: "ingress"
        # controller.nodeSelector.node-role\.kubernetes\.io/master: ""
        # defaultBackend.nodeSelector.node-role\.kubernetes\.io/master: ""
        # controller.service.externalIPs: "{${OROMIS_IPADDR_2}}"
        default.backend.enabled: false
        # defaultBackend.service.externalIPs: "{${OROMIS_IPADDR_2}}"

    traefik:
      <<: *enabled
      description: "Edge Router that makes publishing your services a fun and easy experience"
      group: "ingress"
      namespace: "ingress"
      chart: "traefik"
      version: "10.19.4"
      priority: -107
      set:
        ports.traefik.expose: true
        additionalArguments[0]: "--metrics.prometheus=true"
        additionalArguments[1]: "--ping"
        additionalArguments[2]: "--log.format=json"
        additionalArguments[3]: "--accesslog=true"
        additionalArguments[4]: "--api.dashboard=true"
        deployment.podLabels.release: "prometheus"
        # nodeSelector.node-role\.kubernetes\.io/master: ""
        # service.externalIPs: "{${OROMIS_IPADDR_3}}"

  # CI/CD Block (priority: -100)

    argocd:
      <<: *disabled
      description: "ArgoCD - Declarative GitOps CD for Kubernetes"
      group: "cicd"
      namespace: "miscellaneous" 
      chart: "argo-cd" 
      version: "3.10.0" 
      priority: -100
      set:
        dex.enabled: false
        server.extraArgs: "{--insecure}"
        controller.metrics.enabled: true
        server.ingress.enabled: true
        server.metrics.enabled: true
        repoServer.metrics.enabled: true
        server.ingress.hosts: "{argocd.$OROMIS_CLUSTER}"
        server.ingress.annotations.kubernetes\.io/ingress\.class: $OROMIS_INGRESS
        server.config.url: "http://argocd.$OROMIS_INGRESS.$OROMIS_CLUSTER"

    argocd-notifications:
      <<: *disabled
      description: "ArgoCD - Notifications for Kubernetes"
      group: "cicd"
      namespace: "miscellaneous" 
      chart: "argocd-notifications" 
      version: "1.0.14"
      priority: -99
      valuesFiles: 
        - "argocd-notifications/values.yaml" 
      set:
        metrics.enabled: false
